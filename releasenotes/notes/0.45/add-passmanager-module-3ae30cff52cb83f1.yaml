---
features_transpiler:
  - |
    A new :mod:`qiskit.passmanager` module has been added to the Qiskit library.
    This module implements a generic pass manager and flow controllers,
    and provides infrastructure to manage execution of pass manager tasks.
    The module provides base classes for passes (:class:`.GenericPass`) and
    flow controllers (:class:`.BaseController`),
    as well as a new interface class, :class:`.passmanager.Task`, to manage the
    execution of the pass manager (see the :meth:`.Task.execute` method).
    These new classes follow the composite pattern, as flow controllers are
    collections of passes, and a controller can be recursively nested into
    the task pipeline. It must also be noted the base classes are not not aware
    of the input and output object types,
    and they must be subclassed for a particular program type to optimize.
    This unified design reduces the complexity of the conventional pass manager,
    and no longer requires the use of classes such as the :class:`.RunningPassManager`
    to handle the execution logic dispatch and task structure renormalization.
    The :mod:`qiskit.transpiler` module has been reorganized to rebuild the existing
    pass managers based off of the generic pass manager.
    See upgrade notes for more details.


upgrade_transpiler:
  - |
    As a consequence of the pass manager refactoring efforts, existing flow controllers:
    :class:`.FlowControllerLinear`,
    :class:`.ConditionalController`, and :class:`.DoWhileController` are now subclasses of
    the :class:`.BaseController`.
    Note that these controllers have dropped the implementation of the :meth:`~object.__iter__`
    method. They are now only iterable in the context of a flow-controller
    execution, which threads the compilation state through after each inner task is executed.
  - |
    The functionalitly of the :class:`.RunningPassManager` class has been superseded by the
    new pass manager framework (:class:`.BasePassManager` and :class:`.BaseController`).
    The running pass manager is now a stateless flow controller (essentially, an alias of
    :class:`.FlowControllerLinear`), as the pass manager is responsible for the construction
    of task pipeline, while the controller is responsible for the execution of associated tasks.
    Subclassing the :class:`.RunningPassManager` is no longer recommended, and this class
    will be completely replaced with the flow controller in future releases.
  - |
    A new class, :class:`.WorkflowStatus`, has been introduced to track the status of the
    pass manager workflow. This portable object is created when the pass manager is run,
    and handed over to the underlying tasks.
    Such status was previously managed by the :class:`.RunningPassManager` with instance
    variables.
  - |
    The transpiler-specific :class:`.transpiler.PassManager` (used in :func:`.transpile`)
    is now a subclass of :class:`.passmanager.BasePassManager`. However, this class hierarchy
    change doesn't introduce any breaking change to the public-facing API.
  - |
    Exceptions raised during pass-manager execution now inherit from the newly introduced
    :exc:`~qiskit.passmanager.PassManagerError`. A generic failure of the pass-manager
    machinery will raise :exc:`.PassManagerError` for general pass managers, but the
    transpiler-specific :class:`.transpile.PassManager` will currently wrap this in its
    specific :exc:`.TranspilerError` for backwards compatibility.
    This wrapping will be removed in the future.
  - |
    The use of :class:`.FencedObject` in the pass manager framework has been removed.
    This wrapper class cannot protect mutable object attributes from modification,
    and this should not be an issue for properly implemented code. Analysis passes
    should not modify an input IR, controllers should not update the property set,
    and so forth. It's the pass manager developer's responsibility to ensure that
    the pass is not modifying object attributes,
deprecations_transpiler:
  - |
    The flow controller factory method :meth:`.FlowController.controller_factory` is deprecated
    along with :meth:`.FlowController.add_flow_controller` and
    :meth:`.FlowController.remove_flow_controller`. In the future,
    task construction with keyword arguments in the :meth:`.BasePassManager.append` method
    will also be deprecated.
    Controllers must be explicitly instantiated and appended to the pass manager.
    For example, the previously used conventional syntax

    .. code-block:: python

        pm.append([task1, task2], condition=lambda x: x["value1"] > 10)

    must be replaced with

    .. code-block:: python

        controller = ConditionalController([task1, task2], condition=lambda x: x["value1"] > 10)
        pm.append(controller)

    The latter allows more precise control on the order of controllers
    especially when multiple keyword arguments are specified together, and allows for the
    construction of general flow controllers that may have more than one pipeline or do not take a
    single simple conditional function in their constructors.
  - |
    The :meth:`.FlowControllerLinear.append`, :meth:`.DoWhileController.append`,
    and :meth:`.ConditionalController.append` methods are all deprecated immediately.
    The construction of the pass manager task pipeline is now the role of :class:`.BasePassManager`,
    and individual flow controllers do not need to this method.  For a flow
    controller, all the passes should be specificed in one go directly to the constructor.
  - |
    The general attribute and variable name :code:`passes` is replaced with :code:`tasks`
    all over the :mod:`qiskit.passmanager` module. Note that a task must indicate a union of pass
    and controller, and the singular form `pass` conflicts with the Python keyword.
    In this sense, the use of `tasks` is much preferable.
